%pip install psycopg2
Requirement already satisfied: psycopg2 in c:\anaconda\anaconda3\lib\site-packages (2.9.4)
Note: you may need to restart the kernel to use updated packages.
import psycopg2 as pg_driver

db = pg_driver.connect(
    database="postgres", 
    user='postgres',
    password='waltyru01', 
    host='localhost', 
    port='5432'
)


cur = db.cursor()
cur.execute("select * from pg_database")
rs = cur.fetchall()
for row, values in enumerate(rs):
    print(row, values)
0 (5, 'postgres', 10, 6, 'c', False, True, -1, '717', '1', 1663, 'Russian_Russia.1251', 'Russian_Russia.1251', None, None, None)
1 (16398, 'HOMEWORK', 10, 6, 'c', False, True, -1, '717', '1', 1663, 'Russian_Russia.1251', 'Russian_Russia.1251', None, None, None)
2 (1, 'template1', 10, 6, 'c', True, True, -1, '717', '1', 1663, 'Russian_Russia.1251', 'Russian_Russia.1251', None, None, '{=c/postgres,postgres=CTc/postgres}')
3 (4, 'template0', 10, 6, 'c', True, False, -1, '717', '1', 1663, 'Russian_Russia.1251', 'Russian_Russia.1251', None, None, '{=c/postgres,postgres=CTc/postgres}')
import psycopg2 as pg_driver

db = pg_driver.connect(user="postgres",
                       password="hfnfneq2",
                       host='localhost',
                       port='5432')


def execute_queries(db, sql_commands):
    db.autocommit = True
    with db.cursor() as cursor:
        for sql_command in sql_commands:
            print(sql_command)
            cursor.execute(sql_command)

sql_commands = ["CREATE DATABASE project_poiskkino;",
                "CREATE USER projectuser with encrypted password 'hfnfneq2';",
                "GRANT ALL PRIVILEGES ON DATABASE project_poiskkino TO projectuser;"]

execute_queries(db, sql_commands)
CREATE DATABASE project_poiskkino;
CREATE USER projectuser with encrypted password 'hfnfneq2';
GRANT ALL PRIVILEGES ON DATABASE project_poiskkino TO projectuser;
import psycopg2 as pg_driver

db = pg_driver.connect(
                        database="project_poiskkino", 
                        user='postgres',
                        password='hfnfneq2', 
                        host='localhost', 
                        port='5432'
                    )



def execute_queries(db, sql_commands):
    db.autocommit = True
    with db.cursor() as cursor:
        for sql_command in sql_commands:
            print(sql_command)
            cursor.execute(sql_command)


sql_commands = ["DROP TABLE IF EXISTS users;",
                "DROP TABLE IF EXISTS pictures;",
                "DROP TABLE IF EXISTS award;",
                "DROP TABLE IF EXISTS genre;",
                "DROP TABLE IF EXISTS form;",
                "DROP TABLE IF EXISTS production;",
                "DROP TABLE IF EXISTS rating;",
                "DROP TABLE IF EXISTS age_limit;",
                """CREATE TABLE users (
                         user_id    INT       NOT NULL,
                         name    TEXT       NOT NULL,
                         email   TEXT        NOT NULL,
                         nickname   TEXT        NOT NULL,
                         password   TEXT        NOT NULL,
                         age   INT        NOT NULL,
                         gender   TEXT        NOT NULL,
                         favs   TEXT        NOT NULL
                         
                         
                );
                """,
                 """CREATE TABLE pictures (
                         name_id    INT       NOT NULL,
                         pic    TEXT       NOT NULL
                         
                  );
                """,
                """CREATE TABLE award (
                         name_id    INT       NOT NULL,
                         aw    TEXT       NOT NULL,
                         nomination    TEXT       NOT NULL
                );
                """,
                """CREATE TABLE genre (
                         name_id    INT       NOT NULL,
                         g    TEXT       NOT NULL
                         
                );
                """,
                """CREATE TABLE form (
                         name_id    INT       NOT NULL,
                         f    TEXT       NOT NULL
                         
                );
                """,
                """CREATE TABLE production (
                         name_id    INT       NOT NULL,
                         country    TEXT       NOT NULL,
                         year    INT       NOT NULL,
                         company    TEXT       NOT NULL
                        
                );
                """,
                """CREATE TABLE rating (
                         name_id    INT       NOT NULL,
                         rat    FLOAT       NOT NULL,
                         genre    TEXT       NOT NULL
                         
                );
                """,
                """CREATE TABLE age_limit (
                         name_id    INT       NOT NULL,
                         age    INT       NOT NULL
                         
                );
                """]


execute_queries(db, sql_commands)
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS pictures;
DROP TABLE IF EXISTS award;
DROP TABLE IF EXISTS genre;
DROP TABLE IF EXISTS form;
DROP TABLE IF EXISTS production;
DROP TABLE IF EXISTS rating;
DROP TABLE IF EXISTS age_limit;
CREATE TABLE users (
                         user_id    INT       NOT NULL,
                         name    TEXT       NOT NULL,
                         email   TEXT        NOT NULL,
                         nickname   TEXT        NOT NULL,
                         password   TEXT        NOT NULL,
                         age   INT        NOT NULL,
                         gender   TEXT        NOT NULL,
                         favs   TEXT        NOT NULL
                         
                         
                );
                
CREATE TABLE pictures (
                         name_id    INT       NOT NULL,
                         pic    TEXT       NOT NULL
                         
                  );
                
CREATE TABLE award (
                         name_id    INT       NOT NULL,
                         aw    TEXT       NOT NULL,
                         nomination    TEXT       NOT NULL
                );
                
CREATE TABLE genre (
                         name_id    INT       NOT NULL,
                         g    TEXT       NOT NULL
                         
                );
                
CREATE TABLE form (
                         name_id    INT       NOT NULL,
                         f    TEXT       NOT NULL
                         
                );
                
CREATE TABLE production (
                         name_id    INT       NOT NULL,
                         country    TEXT       NOT NULL,
                         year    INT       NOT NULL,
                         company    TEXT       NOT NULL
                        
                );
                
CREATE TABLE rating (
                         name_id    INT       NOT NULL,
                         rat    FLOAT       NOT NULL,
                         genre    TEXT       NOT NULL
                         
                );
                
CREATE TABLE age_limit (
                         name_id    INT       NOT NULL,
                         age    INT       NOT NULL
                         
                );
                
import psycopg2
from psycopg2 import Error
from psycopg2.extras import NamedTupleCursor

def execute_query(query, fetch_result=False):
    try:
        connection = pg_driver.connect(
                        database="project_poiskkino", 
                        user='postgres',
                        password='hfnfneq2', 
                        host='localhost', 
                        port='5432'
                    );
        
        connection.autocommit = True
        cursor = connection.cursor(cursor_factory=NamedTupleCursor)
        cursor.execute(query)
        if fetch_result:
            return cursor.fetchall()
    except (Exception, Error) as error:
        print("Error while connecting to PostgreSQL", error)
    finally:
        if (connection):
            cursor.close()
            connection.close()
row_count_hist = execute_query("select count(*) from users", fetch_result=True)

print(row_count_hist)
[Record(count=0)]
query = """ INSERT INTO users (user_id, name, email, nickname, password, age, gender, favs) 
            VALUES 
                 (1, 'Elena', 'elena@gmail.com', 'lena2003', '123456', 21, 1, 'drama'),
                 (2, 'Vlada', 'vlada@gmail.com', 'vladusik2002', '111111', 20, 1, 'fantasy'),
                 (3, 'Masha', 'mary@gmail.com', 'maryqueen', '222222', 23, 2, 'cartoon'),
                 (4, 'Dmitriy', 'dima@gmail.com', 'dimmm', '666666', 21, 2, 'drama'),
                 (5, 'Ivan', 'vanya@gmail.com', 'ione', '654321', 30, 1, 'fantasy')
            
        """
execute_query(query)

query = """ INSERT INTO pictures (name_id, pic) 
            VALUES 
                 (1, 'The Green Mile'),
                 (2, 'The Shawshank Redemption'),
                 (3, 'Coco'),
                 (4, 'The Lion King'),
                 (5, 'The Lord of the Rings'),
                 (6, 'Intouchables'),
                 (7, 'Shrek'),
                 (8, 'Breaking Bad'),
                 (9, 'Game of Thrones'),
                 (10, 'Rick and Morty')
                 
        """
execute_query(query)


query = """ INSERT INTO award (name_id, aw, nomination) 
            VALUES 
                 (1, 'Oscar', 'the  best film'),
                 (2, 'Oscar', 'the best film'),
                 (3, 'Oscar', 'the best song'),
                 (4, 'Golden Globus', 'the best film'),
                 (5, 'Oscar', 'the best song'),
                 (6, 'Golden Globus', 'the best film'),
                 (7, 'Oscar', 'the best film'),
                 (8, 'Golden Globus', 'the best film'),
                 (9, 'SAG Awards', 'the best film'),
                 (10, 'SAG Awards', 'the best song')
                 
        """
execute_query(query)

query = """ INSERT INTO genre (name_id, g) 
            VALUES 
                 (1, 'drama'),
                 (2, 'drama'),
                 (3, 'cartoon'),
                 (4, 'cartoon'),
                 (5, 'fantasy'),
                 (6, 'drama'),
                 (7, 'catoon'),
                 (8, 'drama'),
                 (9, 'fantasy'),
                 (10, 'cartoon')
                 
        """
execute_query(query)

query = """ INSERT INTO form (name_id, f) 
            VALUES 
                 (1, 'film'),
                 (2, 'film'),
                 (3, 'film'),
                 (4, 'film'),
                 (5, 'film'),
                 (6, 'film'),
                 (7, 'film'),
                 (8, 'serial'),
                 (9, 'serial'),
                 (10, 'serial')
                 
        """
execute_query(query)

query = """ INSERT INTO production (name_id, country, year, company) 
            VALUES 
                 (1, 'USA', 1999, 'Castle Rock Entertainment'),
                 (2, 'USA', 1994, 'Castle Rock Entertainment'),
                 (3, 'USA', 2017, 'Pixar'),
                 (4, 'USA', 1994, 'Walt Disney Pictures'),
                 (5, 'New Zealand', 2001, 'WingNut Films'),
                 (6, 'France', 2011, 'Gaumont'),
                 (7, 'USA', 2001, 'DreamWorks Animation'),
                 (8, 'USA', 2008, 'Sony Pictures Television'),
                 (9, 'USA', 2011, 'Warner Bros. Television Studios'),
                 (10, 'USA', 2013, 'Warner Bros. Television Studios')
                 
        """
execute_query(query)

query = """ INSERT INTO rating (name_id, rat, genre) 
            VALUES 
                 (1, 9.2, 'drama'),
                 (2, 9.0, 'drama'),
                 (3, 8.8, 'cartoon'),
                 (4, 8.8, 'cartoon'),
                 (5, 8.9, 'fantasy'),
                 (6, 8.8, 'drama'),
                 (7, 8.7, 'cartoon'),
                 (8, 9.0, 'drama'),
                 (9, 8.9, 'fantasy'),
                 (10, 8.8, 'cartoon')
                 
        """
execute_query(query)

query = """ INSERT INTO age_limit (name_id, age) 
            VALUES 
                 (1, 16),
                 (2, 16),
                 (3, 12),
                 (4, 0),
                 (5, 12),
                 (6, 16),
                 (7, 12),
                 (8, 18),
                 (9, 18),
                 (10, 18)
                 
        """
execute_query(query)
#Вывести мультфильм с наградой "Оскар"

query = """SELECT pic FROM pictures
           LEFT JOIN award ON award.name_id = pictures.name_id
           JOIN genre ON genre.name_id = pictures.name_id
           WHERE (g = 'cartoon' and aw = 'Oscar')
                
        """
all_rows = execute_query(query, fetch_result=True)
for row, value in enumerate(all_rows):
    print(row, value)
0 Record(pic='Coco')
#Вывести фильмы 18+

query = """SELECT pic FROM pictures
           LEFT JOIN age_limit ON age_limit.name_id = pictures.name_id
           WHERE age = 18
                
        """
all_rows = execute_query(query, fetch_result=True)
for row, value in enumerate(all_rows):
    print(row, value)
0 Record(pic='Breaking Bad')
1 Record(pic='Game of Thrones')
2 Record(pic='Rick and Morty')
#Вывести сериалы жанра "фэнтези"

query = """SELECT pic FROM pictures
           LEFT JOIN form ON form.name_id = pictures.name_id
           JOIN genre ON genre.name_id = pictures.name_id
           WHERE (g = 'fantasy' and f = 'serial')
                
        """
all_rows = execute_query(query, fetch_result=True)
for row, value in enumerate(all_rows):
    print(row, value)
0 Record(pic='Game of Thrones')
#вывести фильмы с наградой за лучшую музыку к фильму

query = """ SELECT pic from pictures
            JOIN award ON pictures.name_id = award.name_id
            WHERE nomination = 'the best song'
        """
execute_query(query)
result = execute_query(query, fetch_result=True)
for row, value in enumerate(result):
    print(row, value)
0 Record(pic='Coco')
1 Record(pic='The Lord of the Rings')
2 Record(pic='Rick and Morty')
#вывести средний возраст пользователя

query = """ 
            SELECT AVG(age)
            FROM users
        """
execute_query(query)
result = execute_query(query, fetch_result=True)
for row, value in enumerate(result):
    print(row, value)
0 Record(avg=Decimal('23.0000000000000000'))
#Вывести самый новый фильм

query = """ SELECT pic 
            FROM pictures
            RIGHT JOIN production ON production.name_id = pictures.name_id
            ORDER BY year DESC
            LIMIT 1
        """
execute_query(query)
result = execute_query(query, fetch_result=True)
for row, value in enumerate(result):
    print(row, value)
0 Record(pic='Coco')
#Вывести фильм с самым низким рейтингом

query = """ SELECT pic FROM pictures
            RIGHT JOIN rating ON rating.name_id = pictures.name_id
            ORDER by rat ASC
            LIMIT 1   
        """
execute_query(query)
result = execute_query(query, fetch_result=True)
print(result)
[Record(pic='Shrek')]
#Вывести совпадающие рейтинги

query = """ SELECT rat FROM rating
            RIGHT JOIN pictures ON rating.name_id = pictures.name_id
            GROUP BY rat 
            HAVING count(*) >= 2
        """
execute_query(query)
result = execute_query(query, fetch_result=True)
print(result)
[Record(rat=8.9), Record(rat=9.0), Record(rat=8.8)]
#Вывести компании, выпустившие по меньшей мере два фильма

query = """ SELECT company
            FROM production
            FULL JOIN pictures ON production.name_id = pictures.name_id
            GROUP BY company
            HAVING count(pic) >= 2
        """
execute_query(query)
result = execute_query(query, fetch_result=True)
print(result)
[Record(company='Warner Bros. Television Studios'), Record(company='Castle Rock Entertainment')]
#К какому жанру относится фильм ... (например, "Король Лев")?

query = """SELECT g FROM genre
           LEFT JOIN pictures ON pictures.name_id = genre.name_id
           WHERE pic = 'The Lion King'     
        """
all_rows = execute_query(query, fetch_result=True)
for row, value in enumerate(all_rows):
    print(row, value)
0 Record(g='cartoon')
#Вывести картины с наградой "Оскар"

query = """SELECT pic FROM pictures
           LEFT JOIN award ON award.name_id = pictures.name_id
           WHERE aw = 'Oscar'
                
        """
all_rows = execute_query(query, fetch_result=True)
for row, value in enumerate(all_rows):
    print(row, value)
0 Record(pic='The Green Mile')
1 Record(pic='The Shawshank Redemption')
2 Record(pic='Coco')
3 Record(pic='The Lord of the Rings')
4 Record(pic='Shrek')
#Вывести фильмы Франции

query = """ SELECT pic FROM pictures
            FULL JOIN production ON production.name_id = pictures.name_id
            WHERE country = 'France'
        """
execute_query(query)
result = execute_query(query, fetch_result=True)
for row, value in enumerate(result):
    print(row, value)
0 Record(pic='Intouchables')
